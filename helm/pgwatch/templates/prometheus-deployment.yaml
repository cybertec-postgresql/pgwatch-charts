{{- if eq .Values.pgwatch.prometheus.new_prometheus.create_prometheus "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: pgwatch
    vendor: opensource.cybertec
    postgres-operator.cybertec.at/stack: pgwatch
  name: pgwatch-prometheus
spec:
  selector:
    matchLabels:
      postgres-operator.cybertec.at/stack: pgwatch
      name: pgwatch-prometheus
  template:
    metadata:
      creationTimestamp: null
      labels:
        postgres-operator.cybertec.at/stack: pgwatch
        name: pgwatch-prometheus
    spec:
      containers:
      - image: {{ .Values.pgwatch.prometheus.new_prometheus.image }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
        name: pgwatch-prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--storage.tsdb.retention.time={{ .Values.pgwatch.prometheus.new_prometheus.settings.retention_days }}d"
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-cm
        - mountPath: /prometheus
          name: prometheus-volume
        {{- if eq .Values.pgwatch.prometheus.new_prometheus.create_alertmanager "true" }}
        - mountPath: /etc/prometheus/alert-rules.d
          name: alertmanagerrules
        {{ end }}
      securityContext: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: pgwatch-prometheus-cm
        name: prometheus-cm
      - name: prometheus-volume
        persistentVolumeClaim:
          claimName: prometheus-pvc
      {{- if eq .Values.pgwatch.prometheus.new_prometheus.create_alertmanager "true" }}
      - configMap:
          defaultMode: 420
          name: alertmanager-rules-config
        name: alertmanagerrules
      {{ end }}
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: Recreate
{{ end }}